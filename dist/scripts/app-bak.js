define(["angular","ItemMirror"],function(angular,ItemMirror){var app=angular.module("app",["ngRoute"]);return app.directive("hallo",function(){return{restrict:"A",require:"?ngModel",link:function(scope,element,attrs,ngModel){ngModel&&(element.hallo({plugins:{}}),ngModel.$render=function(){element.html(ngModel.$viewValue||"")},element.on("hallodeactivated",function(){ngModel.$setViewValue(element.html()),scope.$apply()}),element.on("keydown",function($event){13===$event.which&&($event.preventDefault(),element.next().focus())}))}}}),app.factory("IM",function($q){var dropboxClientCredentials={key:"wsvaq6pyykd3mi8",secret:"fqnw1x9o91han3c",token:"xRhoafCazcIAAAAAAAAAVjksVLK3z90uaU4cMqUErZQsrJfKOI5_vv4jOJGZxvD5"},dropboxClient=new Dropbox.Client(dropboxClientCredentials),dropboxXooMLUtility={driverURI:"DropboxXooMLUtility",dropboxClient:dropboxClient},dropboxItemUtility={driverURI:"DropboxItemUtility",dropboxClient:dropboxClient},mirrorSyncUtility={utilityURI:"MirrorSyncUtility"},groupingItemURI="/",itemMirrorOptions={1:{groupingItemURI:groupingItemURI,xooMLDriver:dropboxXooMLUtility,itemDriver:dropboxItemUtility},2:{groupingItemURI:groupingItemURI,xooMLDriver:dropboxXooMLUtility,itemDriver:dropboxItemUtility,syncDriver:mirrorSyncUtility,readIfExists:!1},3:{groupingItemURI:groupingItemURI,xooMLDriver:dropboxXooMLUtility,itemDriver:dropboxItemUtility,syncDriver:mirrorSyncUtility,readIfExists:!0}},IM={};return IM.connectDropbox=function(){var deferred=$q.defer();return dropboxClient.authenticate(function(error,client){console.log("Dropbox object:"),console.dir(client),error&&deferred.reject(error),deferred.resolve(client)}),deferred.promise},IM.constructItemMirror=function(){var deferred=$q.defer();return new ItemMirror(itemMirrorOptions[3],function(error,itemMirror){IM.itemMirror=itemMirror,error&&deferred.reject(error),deferred.resolve(itemMirror)}),deferred.promise},IM.getDisplayName=function(){var deferred=$q.defer();return IM.itemMirror.getDisplayName(function(error,displayName){error&&deferred.reject(error),deferred.resolve(displayName)}),deferred.promise},IM.getAssociationGUIDs=function(itemMirror){var deferred=$q.defer();return itemMirror=itemMirror||IM.itemMirror,itemMirror.listAssociations(function(error,GUIDs){IM.GUIDs=GUIDs,error&&deferred.reject(error),deferred.resolve(GUIDs)}),deferred.promise},IM.getAssociationNames=function(GUIDs){var promises=GUIDs.map(function(GUID){var deferred=$q.defer();return IM.itemMirror.getAssociationDisplayText(GUID,function(error,displayText){error&&deferred.reject(error),deferred.resolve(displayText)}),deferred.promise});return $q.all(promises)},IM.getChild=function(GUID){var deferred=$q.defer();return IM.itemMirror.createItemMirrorForAssociatedGroupingItem(GUID,function(error,childItemMirror){IM.childItemMirror=childItemMirror,console.log("Child itemmirror: "),console.dir(childItemMirror),error&&deferred.reject(error),deferred.resolve(childItemMirror)}),deferred.promise},IM}),app.controller("AppController",function($scope){$scope.name="World!"}),app.controller("MainCtrl",function($scope,IM){$scope.status="Loading Associations...",IM.connectDropbox().then(IM.constructItemMirror).then(IM.getAssociationGUIDs).then(IM.getAssociationNames).then(function(result){$scope.associations=result,$scope.status="success",$scope.loaded=!0,$scope.GUIDs=IM.GUIDs},function(reason){console.log("Failed: "+reason)},function(update){console.log("Got notification: "+update)}),$scope.showChild=function(){IM.getChild($scope.GUIDs[0]).then(function(result){$scope.childItemMirror=result},function(reason){console.log("Failed: "+reason)},function(update){console.log("Got notification: "+update)})},$scope.content="<h2>I'm editable</h2><ul><li>Don't believe me?</li><li>Just click this block and start typing!</li><li>Assuming you just dasdfid, how cool is that?!</li></ul>"}),app});